#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../src/app');
var debug = require('debug')('rest-api-nodejs-mongodb:server');
var http = require('http');
const sequelize= require("../src/sequelize");
const {accountSeedAsync}= require("../Seed/accountSeedAsync");
const {transactionSeedAsync}= require("../Seed/transactionSeedAsync");
const {currencyRateSeedAsync}= require("../Seed/currencyRateSeedAsync");


async function assertDatabaseConnectionOk() {
	console.log(`Checking database connection...`);
	try {
    await sequelize.sync({force: process.env.DEV});
		
    if(process.env.DEV){
      await currencyRateSeedAsync();
      await accountSeedAsync();
      await transactionSeedAsync();
    }
	} catch (error) {
		console.log('Unable to connect to the database:');
		console.log(error);
		process.exit(1);
	}
}

async function init(){

    await assertDatabaseConnectionOk();
  /**
 * Get port from environment and store in Express.
 */

  let port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

/**
 * Create HTTP server.
 */

  let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', ()=>{
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  });
}


init();
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}